import maya.cmds as cmds
import pymel.core as pm
from functools import partial


NODE_DICTIONARY = {
    'ADL': partial(pm.createNode, 'addDoubleLinear'),
    'blendROT': partial(pm.createNode, 'animBlendNodeAdditiveRotation'),
    'BLC': partial(pm.createNode, 'blendColors'),
    'BTA': partial(pm.createNode, 'blendTwoAttr'),
    'CFME': partial(pm.createNode, 'curveFromMeshEdge'),
    'CLMP': partial(pm.createNode, 'clamp'),
    'CMPM': partial(pm.createNode, 'composeMatrix'),
    'CND': partial(pm.createNode, 'condition'),
    'CPOS': partial(pm.createNode, 'closestPointOnSurface'),
    'curveInfo': partial(pm.createNode, 'curveInfo'),
    'DCPM': partial(pm.createNode, 'decomposeMatrix'),
    'DIST': partial(pm.createNode, 'distanceBetween'),
    '4x4M': partial(pm.createNode, 'fourByFourMatrix'),
    'INVM': partial(pm.createNode, 'inverseMatrix'),
    'LOFT': partial(pm.createNode, 'loft'),
    'MDIV': partial(pm.createNode, 'multiplyDivide'),
    'MDL': partial(pm.createNode, 'multDoubleLinear'),
    'MM': partial(pm.createNode, 'multMatrix'),
    'PMA': partial(pm.createNode, 'plusMinusAverage'),
    'PMM': partial(pm.createNode, 'pointMatrixMult'),
    'POCI': partial(pm.createNode, 'pointOnCurveInfo'),
    'POSI': partial(pm.createNode, 'pointOnSurfaceInfo'),
    'REV': partial(pm.createNode, 'reverse'),
    'RMPV': partial(pm.createNode, 'remapValue'),
    'SR': partial(pm.createNode, 'setRange'),
    'UC': partial(pm.createNode, 'unitConversion'),
    'VP': partial(pm.createNode, 'vectorProduct'),
    'WAM': partial(pm.createNode, 'wtAddMatrix')
}

MATH_NODE_DICTIONARY = {
    "Absolute": "ABS",
    "AbsoluteAngle": "angABS",
    "AbsoluteInt": "intABS",
    "Acos": "ACOS",
    "Add": "ADD",
    "AddAngle": "angADD",
    "AddInt": "intADD",
    "AddVector": "vecADD",
    "AndBool": "AND",
    "AndInt": "None",
    "AngleBetweenVectors": "angBTWN",
    "Asin": "ASIN",
    "Atan": "ATAN",
    "Atan2": "ATAN2INPUT",
    "Average": "AVG",
    "AverageAngle": "angAVG",
    "AverageInt": "intAVG",
    "AverageMatrix": "mtxAVG",
    "AverageQuaternion": "quatAVG",
    "AverageRotation": "rotAVG",
    "AverageVector": "vecAVG",
    "AxisFromMatrix": "None",
    "Ceil": "CEIL",
    "CeilAngle": "angCEIL",
    "Clamp": "CLMP",
    "ClampAngle": "angCLMP",
    "ClampInt": "intCLMP",
    "Compare": "None",
    "CompareAngle": "None",
    "CompareInt": "None",
    "CosAngle": "COS",
    "CrossProduct": "CROSS",
    "DebugLog": "None",
    "DebugLogAngle": "None",
    "DebugLogInt": "None",
    "DebugLogMatrix": "None",
    "DebugLogQuaternion": "None",
    "DebugLogRotation": "None",
    "DebugLogVector": "None",
    "DistancePoints": "None",
    "DistanceTransforms": "None",
    "Divide": "DIV",
    "DivideAngle": "angDIV",
    "DivideAngleByInt": "angXintDIV",
    "DivideByInt": "intDIV",
    "DotProduct": "DOT",
    "Floor": "FLOOR",
    "FloorAngle": "angFLOOR",
    "InverseMatrix": "mtxINV",
    "InverseQuaternion": "quatINV",
    "InverseRotation": "rotINV",
    "Lerp": "None",
    "LerpAngle": "None",
    "LerpMatrix": "None",
    "LerpVector": "None",
    "MatrixFromDirection": "DIR2MTX",
    "MatrixFromQuaternion": "QUAT2MTX",
    "MatrixFromRotation": "ROT2MTX",
    "MatrixFromTRS": "SRT2MTX",
    "Max": "MAX",
    "MaxAngle": "angMAX",
    "MaxAngleElement": "angMAXinARRAY",
    "MaxElement": "MAXinARRAY",
    "MaxInt": "intMAX",
    "MaxIntElement": "intMAXinARRAY",
    "Min": "MIN",
    "MinAngle": "angMIN",
    "MinAngleElement": "angMINinARRAY",
    "MinElement": "MINinARRAY",
    "MinInt": "intMIN",
    "MinIntElement": "intMINinARRAY",
    "ModulusInt": "REMAINDER",
    "Multiply": "MULT",
    "MultiplyAngle": "angMULT",
    "MultiplyAngleByInt": "angXintMULT",
    "MultiplyByInt": "fltXintMULT",
    "MultiplyInt": "intMULT",
    "MultiplyMatrix": "mtxMULT",
    "MultiplyQuaternion": "quatMULT",
    "MultiplyRotation": "rotMULT",
    "MultiplyVector": "vecMULT",
    "MultiplyVectorByMatrix": "vecXmtxMULT",
    "Negate": "NEG",
    "NegateAngle": "angNEG",
    "NegateInt": "intNEG",
    "NegateVector": "vecNEG",
    "NormalizeArray": "None",
    "NormalizeVector": "None",
    "NormalizeWeightsArray": "None",
    "NotBool": "NOT",
    "OrBool": "OR",
    "OrInt": "None",
    "Power": "POW",
    "QuaternionFromMatrix": "MTX2QUAT",
    "QuaternionFromRotation": "ROT2QUAT",
    "Remap": "RMP",
    "RemapAngle": "angRMP",
    "RemapInt": "intRMP",
    "RotationFromMatrix": "MTX2ROT",
    "RotationFromQuaternion": "QUAT2ROT",
    "Round": "ROUND",
    "RoundAngle": "angROUND",
    "ScaleFromMatrix": "MTX2SCALE",
    "Select": "SWITCH",
    "SelectAngle": "angSWITCH",
    "SelectAngleArray": "angArraySWITCH",
    "SelectArray": "arraySWITCH",
    "SelectCurve": "crvSWITCH",
    "SelectInt": "intSWITCH",
    "SelectIntArray": "intArraySWITCH",
    "SelectMatrix": "mtxSWITCH",
    "SelectMatrixArray": "mtxArraySWITCH",
    "SelectMesh": "meshSWITCH",
    "SelectQuaternion": "quatSWITCH",
    "SelectRotation": "rotSWITCH",
    "SelectSurface": "surfSWITCH",
    "SelectVector": "vecSWITCH",
    "SelectVectorArray": "vecArraySWITCH",
    "SinAngle": "SIN",
    "SlerpQuaternion": "None",
    "Smoothstep": "None",
    "SquareRoot": "SQRT",
    "Subtract": "SUBTRACT",
    "SubtractAngle": "angSUBTRACT",
    "SubtractInt": "intSUBTRACT",
    "SubtractVector": "vecSUBTRACT",
    "Sum": "SUM",
    "SumAngle": "angSUM",
    "SumInt": "intSUM",
    "SumVector": "vecSUM",
    "TanAngle": "TAN",
    "TranslationFromMatrix": "MTX2POS",
    "TwistFromMatrix": "MTX2TWIST",
    "TwistFromRotation": "ROT2TWIST",
    "VectorLength": "VECLEN",
    "VectorLengthSquared": "VECLENSQ",
    "WeightedAverage": "wtFLT",
    "WeightedAverageAngle": "wtANG",
    "WeightedAverageInt": "wtINT",
    "WeightedAverageMatrix": "wtMTX",
    "WeightedAverageQuaternion": "wtQUAT",
    "WeightedAverageRotation": "wtROT",
    "WeightedAverageVector": "wtVEC",
    "XorBool": "None",
    "XorInt": "None",
}

ARK_NODE_DICTIONARY = {
    'FTV': 'FTV',
    'floatToVec': 'FTV',
    'ATV': 'ATV',
    'angleToVec': 'ATV',
    'VAC': 'VAC',
    'vectorAngleCone': 'VAC',
    'BDM': 'BDM',
    'breakdownMatrix': 'BDM',
}

NODE_NAME_DICTIONARY = {
    'addDoubleLinear': 'ADL',
    'ADL': 'ADL',
    'animBlendNodeAdditiveRotation': 'blendROT',
    'blendROT': 'blendROT',
    'blendColors': 'BLC',
    'BLC': 'BLC',
    'blendTwoAttr': 'BTA',
    'BTA': 'BTA',
    'clamp': 'CLMP',
    'CLMP': 'CLMP',
    'closestPointOnSurface': 'CPOS',
    'CPOS': 'CPOS',
    'condition': 'CND',
    'CND': 'CND',
    'curveFromMeshEdge': 'CFME',
    'CFME': 'CFME',
    'curveInfo': 'curveInfo',
    'composeMatrix': 'CMPM',
    'CMPM': 'CMPM',
    'decomposeMatrix': 'DCPM',
    'DCPM': 'DCPM',
    'distanceBetween': 'DIST',
    'DIST': 'DIST',
    'fourByFourMatrix': '4x4M',
    'FBFM': '4x4M',
    '4x4M': '4x4M',
    'floatTo3': 'FTT',
    'FTT': 'FTT',
    'inverseMatrix': 'INVM',
    'INVM': 'INVM',
    'loft': 'LOFT',
    'LOFT': 'LOFT',
    'multDoubleLinear': 'MDL',
    'MDL': 'MDL',
    'multiplyDivide': 'MDIV',
    'MDIV': 'MDIV',
    'multMatrix': 'MM',
    'MM': 'MM',
    'plusMinusAverage': 'PMA',
    'PMA': 'PMA',
    'pointMatrixMult': 'PMM',
    'PMM': 'PMM',
    'pointOnCurveInfo': 'POCI',
    'POCI': 'POCI',
    'pointOnSurfaceInfo': 'POSI',
    'POSI': 'POSI',
    'reverse': 'REV',
    'REV': 'REV',
    'remapValue': 'RMPV',
    'RMPV': 'RMPV',
    'setRange': 'SR',
    'SR': 'SR',
    'unitConversion': 'UC',
    'UC': 'UC',
    'vectorProduct': 'VP',
    'VECP': 'VP',
    'VP': 'VP',
    'wtAddMatrix': 'WAM',
    'WAM': 'WAM'
}


PLUGIN_LIBRARIES = {
    0: {
        'library': MATH_NODE_DICTIONARY,
        'prefix': 'math_',
        'namespace': 'MMM'
    },
    1: {
        'library': ARK_NODE_DICTIONARY,
        'prefix': '',
        'namespace': 'ARK'
    }
}


# Custom nodes
# TODO: Full deprication coming soon
def float_to_three():
    ft3_node = pm.createNode('unitConversion')
    pm.addAttr(ft3_node, longName='customInput', attributeType='double')
    pm.addAttr(ft3_node, longName='customOutput', attributeType='double3')
    pm.addAttr(ft3_node, longName='outX', attributeType='double', parent='customOutput')
    pm.addAttr(ft3_node, longName='outY', attributeType='double', parent='customOutput')
    pm.addAttr(ft3_node, longName='outZ', attributeType='double', parent='customOutput')

    pm.connectAttr(ft3_node + '.customInput', ft3_node + '.outX', force=True)
    pm.connectAttr(ft3_node + '.customInput', ft3_node + '.outY', force=True)
    pm.connectAttr(ft3_node + '.customInput', ft3_node + '.outZ', force=True)
    return ft3_node


NODE_DICTIONARY['FTT'] = float_to_three
